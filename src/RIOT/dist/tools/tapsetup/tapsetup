#!/bin/sh

PROGRAM=$(basename $0)
COUNT="2"
COMMAND=""
BRNAME="tapbr0"
TAPNAME="tap"
DEACTIVATE_IPV6=""
UPLINK=""

usage() {
    echo "usage: ${PROGRAM} [arguments]" >&2
    echo "" >&2
    echo "Defaults:"
    echo "   If no option is given, -c is assumed" >&2
    echo "" >&2
    echo "Options:" >&2
    echo "   -c [<num>], --create [<num>]: Create <num> tap interfaces (default: 2)" >&2
    echo "   -d, --delete:                 Delete all interface" >&2
    echo "   -b <name>, --bridge <name>:   Give name for the bridge (default: tapbr)" >&2
    echo "   -t <name>, --tap <name>:      Name base for the tap interfaces; the" >&2
    echo "                                 generated names will be <name>x" >&2
    echo "                                 (default: tap; ignored on OSX and FreeBSD)" >&2
    echo "   -6, --deactivate-ipv6:        Deactivate IPv6 for the interfaces and bridge" >&2
    echo "                                 (ignored on OSX and FreeBSD)" >&2
    echo "   -u, --uplink:                 Optional uplink interface" >&2
    echo "                                 (ignored on OSX and FreeBSD)" >&2
    echo "   -h, --help:                   Prints this text" >&2
}

unsupported_plattform() {
    echo "unsupported platform" >&2
    echo "(currently supported \`uname -s\` 'Darvin', 'FreeBSD', and 'Linux')" >&2
}

update_uplink() {
    if command -v dhclient > /dev/null; then
        dhclient $1
    else
        echo "DHCP client \`dhclient\` not found." >&2
        echo "Please reconfigure your DHCP client for interface $1" >&2
        echo "to keep up-link's IPv4 connection." >&2
    fi
}

create_bridge() {
    echo "creating ${BRNAME}"

    case "${PLATFORM}" in
        FreeBSD)
            kldload if_bridge
            ifconfig ${BRNAME} create || exit 1 ;;
        Linux)
            ip link add name ${BRNAME} type bridge || exit 1
            if [ -n "${UPLINK}" ]; then
                echo "using uplink ${UPLINK}"
                ip link set dev ${UPLINK} master ${BRNAME} || exit 1
            fi
            if [ -n "${DEACTIVATE_IPV6}" ]; then
                echo 1 > /proc/sys/net/ipv6/conf/${BRNAME}/disable_ipv6 || exit 1
            fi ;;
        OSX)
            ifconfig ${BRNAME} create || exit 1 ;;
        *)
            ;;
    esac
}

up_bridge() {
    case "${PLATFORM}" in
        FreeBSD|OSX)
            ifconfig ${BRNAME} up || exit 1 ;;
        Linux)
            ip link set ${BRNAME} up || exit 1

            # The bridge is now the new uplink
            if [ -n "${UPLINK}" ]; then
                update_uplink ${BRNAME}
            fi ;;
        *)
            ;;
    esac
}

delete_bridge() {
    echo "deleting ${BRNAME}"

    case "${PLATFORM}" in
        FreeBSD)
            sysctl net.link.tap.user_open=0
            kldunload if_tap || exit 1
            kldunload if_bridge || exit 1 ;;
        Linux)
            for IF in $(ls /sys/class/net/${BRNAME}/brif); do
                if [ "${IF}" != "${UPLINK}" ]; then
                    ip link delete "${IF}"
                fi
            done

            ip link delete ${BRNAME} || exit 1

            # restore the old uplink
            if [ -n "${UPLINK}" ]; then
                update_uplink ${UPLINK}
            fi ;;
        OSX)
            ifconfig ${BRNAME} destroy || exit 1 ;;
        *)
            ;;
    esac
}

begin_tap() {
    case "${PLATFORM}" in
        FreeBSD)
            kldload if_tap || exit 1
            sysctl net.link.tap.user_open=1 ;;
        *)
            ;;
    esac
}

create_tap() {
    case "${PLATFORM}" in
        FreeBSD)
            echo "creating ${TAPNAME}${N}" || exit 1
            ifconfig tap${N} create || exit 1
            chown ${SUDO_USER} /dev/tap${N} || exit 1
            ifconfig ${BRNAME} addm tap${N} || exit 1
            ifconfig tap${N} up || exit 1 ;;
        Linux)
            echo "creating ${TAPNAME}${N}"
            ip tuntap add dev ${TAPNAME}${N} mode tap user ${SUDO_USER} || exit 1
            if [ -n "${DEACTIVATE_IPV6}" ]; then
                echo 1 > /proc/sys/net/ipv6/conf/${TAPNAME}${N}/disable_ipv6 || exit 1
            fi
            ip link set dev ${TAPNAME}${N} master ${BRNAME} || exit 1
            ip link set ${TAPNAME}${N} up || exit 1 ;;
        OSX)
            chown ${SUDO_USER} /dev/tap${N} || exit 1
            echo "start RIOT instance for tap${N} now and hit enter"
            read
            ifconfig ${BRNAME} addm tap${N} || exit 1
            ifconfig tap${N} up || exit 1 ;;
        *)
            ;;
    esac
}

while true ; do
    case "$1" in
        -6)
            DEACTIVATE_IPV6=1
            shift ;;
        -b|--bridge)
            case "$2" in
                "")
                    usage
                    exit 2 ;;
                *)
                    BRNAME="$2"
                    shift 2 ;;
            esac ;;
        -c|--create)
            if [ -n "${COMMAND}" ]; then
                usage
                exit 2
            fi
            COMMAND="create"
            case "$2" in
                "")
                    shift ;;
                *[!0-9]*)
                    usage
                    exit 2;;
                *)
                    COUNT="$2"
                    shift 2 ;;
            esac ;;
        -d|--delete)
            if [ -n "${COMMAND}" ]; then
                usage
                exit 2
            fi
            COMMAND="delete"
            shift ;;
        -h|--help)
            usage
            exit ;;
        -u|--uplink)
            case "$2" in
                "")
                    usage
                    exit 2 ;;
                *)
                    UPLINK="$2"
                    shift 2 ;;
            esac ;;
        -t|--tap)
            case "$2" in
                "")
                    usage
                    exit 2 ;;
                *)
                    TAPNAME="$2"
                    shift 2 ;;
            esac ;;
        "")
            break ;;
        *)  usage
            exit 2 ;;
    esac
done

if [ -z "${SUDO_USER}" ]; then
    echo 'Environment variable $SUDO_USER required; Please run with `sudo`'
    exit 1
fi
if [ -z "${COMMAND}" ]; then
    COMMAND="create"
fi
case "$(uname -s)" in
    Darwin)
        PLATFORM="OSX"
        if echo "$BRNAME" | grep -v -q "^bridge"; then
            BRNAME=bridge42
        fi ;;
    FreeBSD)
        PLATFORM="FreeBSD"
        if echo "$BRNAME" | grep -v -q "^bridge"; then
            BRNAME=bridge0
        fi ;;
    Linux)
        PLATFORM="Linux" ;;
    *)
        unsupported_plattform
        exit 1 ;;
esac

if [ "${COMMAND}" = 'create' ]; then
    create_bridge || exit 1

    begin_tap || exit 1

    for N in $(seq 0 "$((COUNT - 1))"); do
        create_tap || exit 1
    done

    up_bridge || exit 1

elif [ "${COMMAND}" = 'delete' ]; then
    delete_bridge
else
    echo 'unknown command'
    exit 1
fi

exit 0
